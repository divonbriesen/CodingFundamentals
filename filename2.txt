1213 Attendance, Notes & Miscellany

Urgent notes/requests/issues for TODAY	1
23MAR2021 Tuesday Lecture/workshop Attendance	1
Lecture/workshop	2
Group Notes -	2
Learning Community	2
Learning Communi Group 1	2
Learning Community Group 2	3
Learning Community Group 3	3
Learning Community Group 4	5
Learning Community Group 5	6
Learning Community Group 6	7
Learning Community Group 7	7
Learning Community Group 8	8
Learning Community Group 9	8
Learning Community Group 10	9
Learning Community Group 11	10
Learning Community Group 12	11
Learning Community Group 13	11
Learning Community Group 14	12
Learning Community Group 15	12

Urgent notes/requests/issues for TODAY
Write ‘em here… especially if we need to meet and talk about it after class. 
Start recording!
Big projects - help me help you
Grading delays
Issues: (put your name and explanation if you have something we need to be sure to talk about)


4APR2021 Lecture/workshop Attendance 
Put your name in the format Last, First M. and the date and  time.
We’re reworking this course over the summer - what meaningful specific suggestions do you have?
von Briesen, D.I. - 4/6/21 9:58am - rework the labs to be html, and not dependent on one another. 
Gallo, Nicolle A - 4/6/2021 9:58 am - Don’t wait last minute to do big assignments.
Kelly, Sydney N. 4/6/2021 10:00 am - guidance on programming assignments with clear instructions like labs. Go over specific topics relevant to assignments for that week. A number of assignments per week that does not exceed the credit to study time expectations of 6-9 hours.
Botero, Samuel A. - 4/6/21 10:06 am - try to have schedule times throughout the weeks to have certain assignments graded. That way grades are somewhat up to date and people will know when certain assignments need reworking.
Steed, Ivory R. - 4/6/21 - 9:58 am - have assignments displayed correctly in each module instead of being mixed up sometimes.
Hasty, Logan - 4/6/21 - 10:05am - analyze the workload and alleviate some of the tedious busywork. Also, on the programming assignments that are big projects, some additional guidance would be nice. 
Davis, Kyle - 4/6/21 - 10:02 - the ratio of zybooks to codeworkouts makes it feel like busywork.
Meeks, Reiley - 4/6/21 9:58am - Be more consistent with assignments and modules  
Treese, Jake - 04.06.21 10:02am - I would say probably more in class things and less zybooks wall to wall pages of text, and also clearer instructions on big programs. 
Settle, Matthew - 4/6/21 - 10:03 - Clearer instructions, quicker piazza responses, and better credit hour to time spent ratio
Auten, Daniel L - 04/6/2021 - 10:03 AM - I would say labs that are a little easier in the beginning
Jover, Miguel A - 3/6/21 9:58 am - Make a weekly checklist of assignments, readings, and videos that need to be completed
Abel, Jeremy - 04/06/2021 - 10:06 AM - Improve assignment clarity and also provide a pdf alongside the html instructions.
Smith Cyril J - 4/6/21 10:00 AM - Have a more consistent schedule for assignments.
Puckett, Joshua, A. - 4/6/21 - 10:00am - Meet more than twice a week or have a clear structure set for the assignments
Aung,min 4/6/21 - clearer inst	ructions
Nathem, Hassan fix all the problems with due dates 
Kanampi, Nicholas M. - 4/6/21 10:03 AM - make the assignments more consistent 
Boone, Jelani K. - 4/6/21 10:03am - I would say strive for a smooth stream of assignments throughout the semester
 Murph, Joshua - 4/6/21 9:58am - I would suggest having more programming assignments that allow the students to start a program from scratch to problem solve their way to the goal.
Rabbani, Ammad - 4/6/21 - 9:59AM - Complete big Assignments first and don't wait for the last minute. 
Hoang, Mytien - 4/6/21 9:58am - Everything looks good so far. I like that you guys are updating the modules! 
Antrim, Mackenzie - 4/6/21 10:00am - have the entire semester planned out assignment wise and allow for some wiggle room instead of throwing stuff together throughout the semester.
Udoeyop David - 4/6/21 9:58 am - Allow use of other programming software. 
Haviland, Henry - 4/6/21 10:03 - CodeWorkouts are really helpful. Zybooks isn’t because it doesn’t force you to get it right.
Houissa, Ibrahim - 4/6/2021 10:04 - zybooks over code workouts
Bhatt, Bipin - 4/6/2021 10: 06 - It would more helpful if we have lots of programming checkpoints.
 Swepston, Elise - 4/6/21 9:59am - have specific things that need to be taught during each class and nix the flip class. I spend hours watching/learning something the professor could cover in 30 minutes. I didn’t pay to do independent study. I payed to get the interaction with a teacher wich gives me a deeper understand then just watching a video (might as well not pay for school and skip the degree if all they are giving me is videos).
 Teague, Daniel - 4/6/2021 9:59 am - either get rid of the coding assignments, or redo the instructions in a way that is understandable so the student knows what they are supposed to code.
Hucks, Maximus C - 4/6/21 10:04 - More practice geared towards programming assignments
 De Luna-Peralta, Bryant - 4/6/2021 10:00am Maybe form a mini idea calender to have most of the major assignments due dates on so students can know in advance
Moses,Preston C.-4/6/21-9:59am-Have assignments displayed correctly.
Woodworth, Jack - 4/6/21 - 10:05 am - Schedule the assignments so that things are not sprung on us within a week on topics we hadn’t been taught yet
Allison, Gloria- 4/6/2021 10:04am-Have the entire semester open and planned ahead of time
Hostettler, Gordon - 4/6/21-10:00am- make sure grading is faster, and get rid of code workouts
 Miller, Jacob - 4/6/21 - 9:59 am - Have more in depth instructions for coding assignments
Salazar, Hernandez 04/06/2021 - More clear instructions in coding assignments
 Rapoza, Gabriel 4//21 - 9:59 AM - Eradicate ZyBooks
 Lassiter, Justin - 4/6/21 9:58 am - More breathing room with the larger programming assignments
Seriff, William - 4/6/2021 - 10:09am - Have all the assignments in the module there at the start
Khatri, Abishek -4/6/21 10:06 am - Get assignments done asap without procrastinating. 
 Rojas-Arreola, Isaac - 4/6/2021 - 10:00 am - Reword instructions of assignments to be more specific
Patel, Diya - 4/6/21am - 10:03am - Clear instructions for each assignments 
Wang, Emily - 4/6/219:58am - try to limit the amount of zyBooks to code workouts so it’s not too overwhelming, like don’t have 3 long zybooks and then more code workouts
Abdulrub saleh, 4/6/21 10:11- don't wait to the last minute to change due dates 
Gupta, Akul - 4/6/21 10:02 - more gap between large coding assignment due dates
 Borad, Shivam - 4/6/2021 9:59am - Try to have all the assignments in order for the week. Sometimes it can be frustrating having a new assignment being added in the middle of the week. 
Cisneros Siliezar, Daniel A 4/week-21 10:01am - make programming assignments more clear on how manys and methods are desired, as well as longer due dates for bigger assignments.
Sprague, James 4/6/2021 10:08am - Have a consistent workload each week. Ex: 1 quiz, 1 code workout/zybooks section, 1 lab, 1 programming assignment a week
 Harm Jeffery 4/6/2021 9:59am - have the right due dates so they don’t constantly change during a week
Thornton, Keith 10am 04/06/21- if we can geT through some codeworkout  I would appreciate it.
 Hawks, Zoey - 4/6/2021 10:00 am - Space out the workload appropriately and please fix the canvas.
Thyen, Thomas M. 11am 04/06/2021 sorry im late, Internet was out. If we are able to submit more than one lab at a makeup, that would be great. This course required a lot of time and I am slightly behind schedule.
Bhattarai , Akash - 4/6/2021 - 10:02 - Labs instruction were a little more clear 
Davis, Robert - 4/6/2021 10:02 am - actually tell us what to do in the lab, not just implement it, the lab is supposed to help cement the idea not make you feel stressed because you can figure it out
Schulz, Andrew - 4/6/2021 10:01 am - Try and set assignments to their due date without change
Hastings, Bryce - 4/6/21 9:58 am - Figure out when the assignments should be due. 
Servin, Zechariah - 4/6/2021 10:00 am - Dont have duplicates of assignments. Unpublish assignments that are not going to be used instead of separate module tab. Sustain consistent due dates.
Hamilton, Logan -4/6/21 10:00 am - Ensure assignments are in proper module with correct due date
Poythress, Eli 4/6/21 10:04 am make sure the due dates are more definitive 
Stahlman, Alex - 4-6-21 - 10:02am - a little more defined instructions for coding assignments
Thorpe Andre -4/6/21 - 10:00 am - spacing some of the assignments out
York, Ian - 4/6/21 - 10:00am - Organize assignments
Lim, Connor - 4/6/2021 - 10:04am - make sure assignments aren’t added throughout the wweek
Viteri, Divino - 4/6/2021 - 10:09am - Codeworkouts are kinda hard to keep up with can we only have problems relevant to the module material to the week
Galbreath, Scott 4/6/2021 10:10am - Don’t have all the assignments due at the end of the week. 
Have them due throughout the week.
Aljehani, Abdullah 4/6/2021 10:09am - due dates of assighments should be not all in one day, lab submission should be alone.
Sirimilla, Niteesh 4/6/2021 10:05 - take out code workouts and less zybooks assignments
Vala,Shega 4/6/2021 10:15 am . The same material is reviewed over and over during the lecture.
Vanamali, Kris, 4/6/21 10:20am - rework code workouts to be more up to date with the current work
Dunaway, Jarett - 4/6/12 10:10am
Exam Review:

Class
Defines a mixture of fields and methods (called “members”) - type, specification, blueprint, design
Fields ARE - aka properties, values, attributes, settings, characteristics, etc...
Methods DO (or are DONE) - aka verbs
Can only actually use static items that it has as members
Math.PI, System.out.println()  (Math, and System are CLASSES, not objects, and we can do this because PI is static, and out and println are also static)
Object
The thing we build from the class (aka an “instance” of that type). 
It has it’s own fields (from the specification/class)
Can run the methods it has
String aString = new String(“Yo”);
Scanner input = new Scanner(System.in);
CANNOT call Scanner.nextLine() because nextLine is NOT static
Fields
The variables that are a member of a class which are created when you create an object from that class. They represent the settings “fields” for that object. 
They can ONLY exist for a CLASS if static (i.e. ClassName.staticField → Math.PI)
Have access modifiers private, public, protected, or default (i.e. no access modifier). 
Math.PI (PI is public, because you can refer directly to it). 
Usually we access and change these via public methods (getters and setters - aka accessor and mutators)
Methods:
Something that an object DOES. (i.e. a verb)
MUST have parenthese (both in definition and invocation - aka calling)
Call a method by putting it’s name, and giving it any required arguments. 
Get a result from a method by putting the method where you want the result. The result is what the method returns.    
String totalBill = anOrder.calculateTotalBill(); (likely anOrder is an object)
String totalBill = Order.calculateTotalBill(); (likely Order is a class, and calculateTotalBill() is static)
calls - call must match signature (name, return type, and arguments/parameters) (see exception of return type not being used)  - look at 
return type (remember that all objects have types, as do primitives
Method name (must have ()) 
Quantity, type, and order of arguments must match those defined in the method definition
getters/setters are accessors/modifiers serve to retrieve and change fields in an object
How would you know something is a constructor, and how does it differ from other methods?
Define and instantiate arrays and array lists
Define and instantiate objects - know the difference between defining and instantiating
Refer to array and arraylist values
Understand what a super class is, and what the super super (adam/eve) of ALL classes is
Constructors (what is the default, how do you use it, how do you identify it). Overriding is common and makes the default no longer available
Access modifiers (public, private, protected… blank (default)
Remember that comparing objects is not like comparing primitives
Value vs reference variables (primitives vs objects)
Static vs. non-static (i.e. Class vs object)
Inheritance
super
extends
constructor
Access modifiers
Understand technical vs. conversational terms
Exceptions - written in code to avoid crashes - generated during crashes, caught with catch block. TRY to do something that COULD crash, and handle the crash in the CATCH block. 
Abstract is not real… it provides a concept that the real class (that extends it) must apply
UML
Top line is name
2nd row is fields
3rd row is methods
Special characters in front are access modifiers (+, -, #, ~)

Lecture/workshop
Group Notes - 
Learning Community
Use this space to take notes. I suggest making a horizontal divider with a date (i.e. =========03/03/2021========== for each session and putting your initials after your notes so your group knows who did them.  See the canvas teams and put your team here (use heading 3) and take group notes. Arrange groups in order of number. You do not need the names there as they are already in canvas, though you are welcome to put them there if it helps you organize.
Learning Communi Group 1
Nicholas Kanampiu NK
Emily Wang EW
String, int, double, boolean are the most commonly used data types but it depends on what the goal of the program and what is needed.
++ before the variable is a prefix unary increment operator, when it is after the variable, it is a postfix unary increment operator
-- is the same as ++ however, instead of being an increment operator, it is a decrement operator
Sequence = one step at a time
Decision = choices or branches
Iteration = (loops) combination of choices
Min Aung MA
sequence = one line code after another
Decision = branching
Iteration = repetition
API = Application Programming Interface
Josh Tate JT
Jeffery Harm JH
-- is a prefix unary decrement operator 
Samuel Boter SB
1/28/2021:
Take away the formalities of code language when writing pseudo code; try explaining the code to a rubber duck.
Don’t name a variable “num”. Just don’t
2/2/2021:
3 control structures(ways to control the flow of code) - Sequence, Decision, Iterations
If/Else Statement - use when code follows some sort of boolean logic, use ‘else’ for the exceptions
Switch Statement(also known as case) - use in terms of multiple values for a variable
2/4/2021:
2/18/21:


Kyle Aron KA

Learning Community Group 2
Parker Gillotte PG
Andrew Schulz AS 
Nicolle Gallo NG
-++i prefix unary increment operator
-Sequence is a line of code after another
-Decision = branching

Jon Esperanza JE
	=========01/26/2021==========
	6 primitive data types: int, double, float, char, string, boolean
Char: uses single quotes
String: uses double quotes - ‘+’ adds or concat

	‘++’_ before variable is prefix unary increment operator
Increments before current expression is evaluated
	 ‘--’_  before variable is prefix unary decrement operator
Increments before current expression is evaluated
_‘++’ after variable is postfix unary increment operator
	Increments after current expression is evaluated
	 _‘--’  after variable is postfix unary decrement operator
Increments after current expression is evaluated
=========02/02/2021==========
	Control Structure: 
Sequence - one line of code at a time
Decision - branching
Iteration - loops


Ivory Steed IS
Jaylen Pryor Jp
Jacob Miller JM
Bipin Bhatt BB

Learning Community Group 3
Jaylon Carrington JC
Miguel Jover MJ
Elise Swepston ES
Greyson Gerber
Raghav Khanna RK
Diya Patel DP
Bryce Hastings
Shega Vala
“++_” is the prefix unary increment operator
“_++” is the postfix unary increment operator
“--_” is the prefix unary decrement operator
“_--” is the postfix unary decrement operator

Sequence: One line after another
Decision/branching: A decision is made and splits off
Iteration/loops: repetition 

Ex:
public static void main(String[] args)
{
	System.out.println(“Sequence”);
	int x = 5;
	if (x == 5) System.out.println(“Decision”);
	System.out.println(“The following iteration will count to 5: “)
	for (int i = 0; i < 5; i++) System.out.print(i);

Notes 2/2 


Shega Vala
Control Structure 
1.Sequance(line-by-line executed)
2.Decision or Branching 
3.Loops

The difference between multiple if statements and if else statements is that we use multiple if statements when more  than one statement is true.



Scott Galbreath SG
Control Structures
Sequence
Decision
Loops

Elise Swepston ES
	von Briesen doesn’t like switch statements… don’t use them
	Don’t use break to exit a loop.
Diagrams.net

Bryce Hastings BH
	Practice this until you really have it down. Use counters in for loops until you understand what is going on. Then you can use ‘i’. 
	for(int i = 0; i < arrayName.length; i++)
	{
		System.out.println(aListOfNumbers[i]);
	}

2/25
	UML stands for … and Unified Modeling Language, used to show the different classes and what is relevant to them. I don’t think he explained how to make them. 



Learning Community Group 4
Joshua Puckett JP
Akul Gupta- AG
Abishek khatri- AK
Abdullah Aljehani-AA


1/26/2021
6 Primitive Types: Char, int, string, double, float, boolean
Char uses single quotation marks
Unary operator - an operator that operates on one thing (++,--)
--i is the prefix unary decrement operator
++i is the prefix unary increment operator
I-- is the postfix unary decrement operator
I++ is the postfix unary increment operator
Control structures:
Sequence
Branching
iteration
Joshua Puckett JP
Akul Gupta- Corner Case


AK: 1/28/2021 - Make a flowchart to help write the pseudocode. When writing a pseudocode or making a flowchart, use real words and not abbreviations. 
For loop: used to repeat a specific code a number of times.
While loop: used to repeat a specific code a number of times until a condition is met.
Write comments in the code to help understand what is going on, step by step.
DCS - 2/2/2021 
Sequences mean to take it one byte at a time
Decisions are going one way or another (tree branching but in programming, they come back together)
Iteration (loops and repetition)
Refrain from using break statements to leave a loop
DRY code: dont repeat yourself (aim to always use DRY code)
WET code: write everything twice
2/4: 
AG: 
Sequence- one step at a time
Decision - choices or branches
Iteration- loops, combination of choices
Declaring or defining a variable means you create a variable 
Initializing a variable is giving a variable a value



Learning Community Group 5
Isaac Rojas-Arreola IRA - The type of primitive data type used will depend on the context. + can be used for addition or concatenate. + or - binary operators. -- in the front is a prefix unary decrement operator. -- in the back is a postfix unary decrement operator. 
2/2: 
DRY = don’t repeat yourself 
WET = write everything twice
2/4:
Code Structures: Decision (choices or branches), Sequence (one step at a time), Iteration (loops or combination of choices)
Declare or define means creating a variable
Initializing a variable is assigning your first value to a variable
2/16 
Classes are blueprints or classifications
Instantiating = creating an instance of a class
“.” = getting or referring to a method or object from the classes
‘=’ = assignment operator
2/18
Classes that represent primitive data types are called wrapper classes

Unary is an operator that operates on one thing (++,--) -BDP


Dereck Sorto-Maltez -- prefix unary decrement operator /  ++ postfix unary increment operator
https://drive.google.com/file/d/1wZoWB2knU9ygyTJusEeLocjBXGO1IsdK/view

Miranda Mattie
Sequence is one Byte at a time Branching or decision is where you have to go one way or another. Loops or Iteration repeat processes - BDP

Gabriel Rapoza - GR



Learning Community Group 6
(++) is a prefix unary increment operator, (--) is a prefix unary decrement operator, i++ is a postfix unary increment operator, i-- is a postfix unary increment operator - MA
3 Control Structures, Sequence (one line at a time),  Branches/Decisions (when you’re doing one thing or the other based off conditions, tree branching in programming they come back), and Iteration/Loops (repeating stuff) - MA
DRY code = Don’t Repeat Yourself, WET code = Write Everything Twice - MA


Use the most efficient data type. Don’t use doubles when you can use ints, etc. - DLH
Be sure to complete the pre-class activities in order to get the most out of class period - DLH
Unary is an operator that operates on one thing. -DLH
(++) before the operand is a prefix unary increment operator -DLH
(--) before the operand is a prefix unary decrement operator -DLH
Operator does the operation, operand is the item being manipulated -DLH
“Semantic sugar” is something that’s meant to sweeten the life of a programmer because it makes life easier. Not the best practice. -DLH
Sequence is continuous code, one life after another. -DLH 
Branching is going one way or going another -DLH
Loops are used for repeating a section of code until conditions are met. -DLH
++ before the operands is a prefix unary increment operator, i++ Postfix 
Sequence is one line of code after another
Sequence, Decision, Iteration- JG 
(--) is the prefix unary decrement operator

Return is the output.
For loops- a form of sweeting, makes repeats easier.
Do While loops- runs once - AMT
Sequence is one line of code after another. Branching goes one way or another. When you repeat it is called loops or iteration

Control structures way we run our code - TS
Sequence- Line by line step at a time
Decision-  Choices or branches
Iteration- loops combination of of choices- For, while ,do while




Learning Community Group 7
Shivam Borad SB - Use Char, Double/int, and string if possible. If you add an integer with a double the answer will be a double. The ++ is a prefix unary increment operator. The -- is a prefix unary decrement operator. I-- is a postfix unary decrement operator. 
Sequence is one line of code after another. 
Iteration is loops and a combination of choices. 
Decision

Leonardo Salazar LS
Justin Tubay JT - Always use exact data types for better compiling times and quicker memory allocation.
There are binary and unary operators, binary requires 2 while unary can run based off the one variable.
++i is a prefix unary increment operator , i++ is a postfix
--i is a prefix unary decrement operator, i-- is a postfix
Ammad Rabbani AR - The ++ is a prefix unary increment operator
 The  -- is a prefix unary decrement operator
Gabriel Little : when using  mathematical operators, you must write your operations in the order that you will like them to be in when calculated. For example,  3 + 5 * 2 = 3 + 10 = 13.
			

Learning Community Group 8
Henry Haviland
Niteesh Sirimilla NS - Sequence: one line of code after another. One way to another is branching. In programming branching makes code come back together. 
Gordon Hostettler - for basic s only use string, int, and double, and occasionally boolean, uanry operators are ++,--. -- is the prefix unary decrement operator, ++ is the postfix unary decrement operator.
Preston Moses PM-6 primitive types. Int+ double=double output.Unary operators are ++ or --.++ before operand is prefix unary increment operator.-- is the prefix unary decrement operator.
Learning Community Group 9 
Alex Stahlman - AS 
An easy way to remember what ++ and -- do, think of our for loops of for (int x=0; x<0; i++){ that i++ will result in it adding 1 or subtracting with --
Joshua Murph - JM
https://docs.google.com/document/d/1PqKMRGHHJ_Oa90mpeG3VctOuFB5_86kqJgH5cguiAZI/edit?usp=sharing

Jonathan Honeycutt - JH
For the basics of Java try to only use string, int, double, and occasionally boolean, unless it is necessary to use another data type. Unary operators only operate on one thing, ie. ++ or --. The ++ used before an operand is a prefix unary increment operator. When ++ is used after the operand it is a postfix unary increment operator. 
Thomas Steinauer - TS




Learning Community Group 10
Cyril Smith - CS
Justin Lassiter - JL
1/26
Use int, double, and string unless necessary to use something else -ZS
int: integers, double/float: hold decimal numbers, char: single quotes, string: double quotes - JL
If you put numbers in a string, the program will read the numbers as characters and won't do the math - JL
unary operator: operates on one thing (++ adds 1)(-- subtracts 1)
Prefix unary increment operator
Prefix unary decrement operator
Prefix and Postfix
Semantic sugar: making programming easier to view
1/28
Pseudocode: purpose is to walk through code without thinking too much.
For Loop Syntax: initialization, condition, update
2/2
Sequence: one line of code after another
Decision: one thing or another, branches -ZS
Repeat: Loops/ iteration -ZS 
String is a class that is treated as a primitive
Dry code VS Wet code
2/4
Sequences: one step at a time
Decisions: choices or branches
Iteration: loops (combination of choices)
Declare/Define: saying what it is (name, type)
Looping through an array:
for (int i = 0; iCounter < arrayName.length; i++)
{
System.out.println(aListOfNumbers[i]);
}
For Each Loop syntax:
for (type varName: arrayName)
{
System.out.println(varName);
}
You can't initialize a non-declared variable…
2/23
Java reserved words
When you see parentheses, it is a method.
When you see a capital letter, it is a class.
Classes should also be named after nouns




Learning Community Group 11
Ian York IY
Reiley Meeks - RM
Mytien Hoang- MH
Daniel Teague - DT
James Sprague - JS
MH: 
	Int-Integer(Holds only as a character in Java), Double-(-/+)number value containing decimals(Holds as a value,Float-(Falls in the same as Double but holds larger value), Boolean- True/False, String- Word, Char-Character 
 Unary  Add this Before, (++,--), 
 Postfix Unary Decrement Operator. Add this after.
JS, 2/2:
- Lectures Review
	- Sequence: one code after another
	- Decision: code differs in certain conditions
	- Iterations: code that is repeated. typically has a decision in the loop.
- When would you want to use multiple if statements or if/else statements?
	- If you are above 21 you can drink, and if you are above 17 you can watch R rated movies.
	- When you use separate if statements, you can have both of these conditions set to true.
	- When you use if/else statements, only one of these can be true since the second if/else statement will only execute if the first if statement is false.
- Declaring a variable doesn't assign a value, ex: int iAge;
- Initializing a variable assigns its first value, ex: iAge = 3;


MH, 2/2: 
DT; 1/26:
6 primitive types
Int
Double
Float 
Boolean
String
Char
Unary operators: operates based on one thing
++ is a postfix unary increment operator
-- is a postfix unary decrement operator
DT; 2/2:
3 types of code:
Sequences: code written individually one line after another
Decision / branching:  code splits to make multiple options
Loops / iteration: repeats a section of code multiple times
Dry code: don’t repeat yourself
Wet code: write everything twice
Learning Community Group 12
 Hunter-
Robert Davis
Hassan Nathem

Operators
Primitive
Int
Double
Boolean
String
Char
Float
Unary
Changes one thing
++
--
Semantic Sugar
Makes coding life easier

Last array length value is length - 1

Learning Community Group 13
Jelani
Logan Hamilton
Maximus Hucks
Binary operators - act upon two values (-,+,/)
Unary operators - act upon one value (++,--)
Prefix unary increment operator = ++i
-- is the prefix unary decrement operator
When the operator comes before the value, prefix
When the operator comes after the value, postfix
Tommy Thyen \/
Never use break to exit a loop. 
When code is compiled, the PC makes it concise and fast.
Dry code means don't repeat yourself
Wet means you say everything twice
Sequence - 1 step at a time
Decision - choices or branches
Iteration - loops - combination of choices


Learning Community Group 14
6 Primitive Types
Char, Double, Float, Boolean, String, int
-Using double over int uses more memory
- ++ before operand is the prefix unary increment operator
- ++ after operand is the postfix unary increment operator
- -- before operand is the prefix unary decrement operator
- -- after operand is the postfix unary decrement operator

--  Branching:going one way or another
-- Repeat: loops. Decisions, iteration 
-- Dry code - Dont Repeat Yourself
-- Wet Code - Write Everything Twice
-- classes start with a capital letter and are generally a noun (ex: Student)
-- methods should be camelCased


- Zoey Hawks
Methods need to be verbs, words of action
Classes needs to be nouns

- Daniel Auten


Control Structures: order in which code runs
Sequence: line after line
Decision: one thing or the other - branching - shortcut or detour
Iteration: loops - repeats


Learning Community Group 15

